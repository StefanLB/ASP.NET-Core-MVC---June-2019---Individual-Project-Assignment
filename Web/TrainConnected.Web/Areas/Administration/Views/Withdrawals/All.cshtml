@model IEnumerable<TrainConnected.Web.ViewModels.Withdrawals.WithdrawalsProcessingViewModel>
@using System.Globalization
@using TrainConnected.Common
@using TrainConnected.Data.Models.Enums

@{
    ViewData["Title"] = "All";
    var balance = this.ViewData["userBalance"];
    var pendingWithdrawals = Model.Where(s => s.Status == nameof(StatusCode.Initiated) || s.Status == nameof(StatusCode.InProcess));
    var completedWithdrawals = Model.Where(s => s.Status == nameof(StatusCode.Approved) || s.Status == nameof(StatusCode.Rejected));
}

<h1>Withdrawals Processing Panel</h1>
<br />
<div class="d-flex justify-content-center" style="padding:5px;">
    <button type="button" class="btn btn-trainconnected" style="margin:5px;" onclick="showPending()">Show Pending</button>
    <button type="button" class="btn btn-trainconnected" style="margin:5px;" onclick="showCompleted()">Show Completed</button>
</div>
<br />
@await this.Html.PartialAsync("_AllSearchBarPartial")
<div class="table-responsive-xl" id="pendingWithdrawals" style="display:block;">
    <h4>Pending Withdrawals</h4>
    <table class="table table-hover">
        <thead class="thead">
            <tr class="table-trainconnected text-center">
                <th>
                    @Html.DisplayNameFor(model => model.Id)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Amount)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.AdditionalInstructions)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CreatedOn)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.TrainConnectedUserUserName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Status)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in pendingWithdrawals)
            {
                <tr>
                    <td>
                        @item.Id
                    </td>
                    <td>
                        @item.Amount @GlobalConstants.Currency
                    </td>
                    <td class="trainconnected">
                        @item.AdditionalInstructions
                    </td>
                    <td>
                        @item.CreatedOn.ToLocalTime().ToString(GlobalConstants.DateTimeFormat, CultureInfo.InvariantCulture)
                    </td>
                    <td>
                        @item.TrainConnectedUserUserName
                    </td>
                    <td>
                        @item.Status
                    </td>
                    <td>
                        <a asp-action="Process" asp-route-id="@item.Id">Process</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="table-responsive-xl" id="completedWithdrawals" style="display:none;">
    <h4>Completed Withdrawals</h4>
    <table class="table table-hover">
        <thead class="thead">
            <tr class="table-trainconnected text-center">
                <th>
                    @Html.DisplayNameFor(model => model.Id)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Amount)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.AdditionalInstructions)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CreatedOn)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.TrainConnectedUserUserName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Status)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CompletedOn)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ProcessedByUserUserName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ResolutionNotes)
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in completedWithdrawals)
            {
                <tr>
                    <td>
                        @item.Id
                    </td>
                    <td>
                        @item.Amount @GlobalConstants.Currency
                    </td>
                    <td class="trainconnected" style="max-width:100px;">
                        @item.AdditionalInstructions
                    </td>
                    <td>
                        @item.CreatedOn.ToLocalTime().ToString(GlobalConstants.DateTimeFormat, CultureInfo.InvariantCulture)
                    </td>
                    <td>
                        @item.TrainConnectedUserUserName
                    </td>
                    <td>
                        @item.Status
                    </td>
                    <td>
                        @item.CompletedOn.ToLocalTime().ToString(GlobalConstants.DateTimeFormat, CultureInfo.InvariantCulture)
                    </td>
                    <td>
                        @item.ProcessedByUserUserName
                    </td>
                    <td class="trainconnected" style="max-width:100px;">
                        @item.ResolutionNotes
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    window.onload = () => {
        checkForEmpty()
    };

    function checkForEmpty() {
        var pendingWithdrawals = document.getElementById("pendingWithdrawals");
        var completedWithdrawals = document.getElementById("completedWithdrawals");
          if (@pendingWithdrawals.Count() == 0 && @completedWithdrawals.Count() != 0) {
            pendingWithdrawals.style.display = "none";
            completedWithdrawals.style.display = "block";
          } else if (@pendingWithdrawals.Count() != 0 && @completedWithdrawals.Count() == 0) {
            pendingWithdrawals.style.display = "block";
            completedWithdrawals.style.display = "none";
          }
    };

    function showPending() {
        var pendingWithdrawals = document.getElementById("pendingWithdrawals");
        var completedWithdrawals = document.getElementById("completedWithdrawals");
        pendingWithdrawals.style.display = "block";
        completedWithdrawals.style.display = "none";
    };

    function showCompleted() {
        var pendingWithdrawals = document.getElementById("pendingWithdrawals");
        var completedWithdrawals = document.getElementById("completedWithdrawals");
        pendingWithdrawals.style.display = "none";
        completedWithdrawals.style.display = "block";
    };
</script>
